CLASS lth_some_wrapper_exception DEFINITION INHERITING FROM cx_sadl_no_check FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
ENDCLASS.

CLASS lth_appl_modeling_error_excptn DEFINITION INHERITING FROM cx_sadl_no_check FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_sadl_appl_model_exc_marker.
ENDCLASS.

CLASS lth_dev_obj_wrapper_exception DEFINITION INHERITING FROM cx_sadl_no_check FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_cx_dev_object_info.
    METHODS constructor IMPORTING previous LIKE previous.
    CLASS-DATA co_aunit_cx_dev_obj TYPE sabp_s_tadir_key READ-ONLY.
ENDCLASS.

CLASS lth_dev_obj_wrapper_exception IMPLEMENTATION.
  METHOD constructor.
    super->constructor( previous = previous ).
    co_aunit_cx_dev_obj = VALUE #( obj_name = 'AUNIT_CX_DEV_OBJECT'
                                   obj_type = 'XAUT' ).
    me->if_cx_dev_object_info~tadir_key = co_aunit_cx_dev_obj.
  ENDMETHOD.
ENDCLASS.




CLASS ltc_texts DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    CONSTANTS co_catch_22 TYPE string VALUE 'Catch 22'.
    CONSTANTS co_reason_42 TYPE string VALUE 'Reason 42'.
    CONSTANTS co_not_our_fault TYPE string VALUE 'Not our fault'.

    CLASS-METHODS class_setup.
    CLASS-METHODS class_teardown.
    METHODS default_case_text FOR TESTING.
    METHODS application_error_text FOR TESTING.
    METHODS sadl_error_text FOR TESTING.
    METHODS subtext_see_previous_exception FOR TESTING.
ENDCLASS.


CLASS ltc_texts IMPLEMENTATION.

  METHOD default_case_text.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW tx_sadl_aunit_no_check( ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        th_sadl_assert=>assert_exception( act_exception = lx_dump
                                          exp_t100key   = cx_sadl_shortdump=>co_unrecoverable_error ).
    ENDTRY.
  ENDMETHOD.

  METHOD application_error_text.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_appl_modeling_error_excptn( ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        th_sadl_assert=>assert_exception( act_exception = lx_dump
                                          exp_t100key   = cx_sadl_shortdump=>co_application_modeling_error ).
    ENDTRY.
  ENDMETHOD.

  METHOD sadl_error_text.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW cx_sadl_assert( ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        th_sadl_assert=>assert_exception( act_exception = lx_dump
                                          exp_t100key   = cx_sadl_shortdump=>co_internal_sadl_error ).
    ENDTRY.
  ENDMETHOD.

  METHOD subtext_see_previous_exception.
    MESSAGE i002(sadl_diagnostic) INTO DATA(exp_dump_reason).
    DATA(root_cause) = NEW cx_sadl_contract_violation( textid = cx_sadl_contract_violation=>message message_text = co_catch_22 ).
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( root_cause ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        th_sadl_assert=>assert_exception( act_exception = lx_dump
                                          exp_text_cp   = |*{ exp_dump_reason }*| ).
        th_sadl_assert=>assert_exception_in_previous( act_exception       = lx_dump
                                                      exp_exception_class = NEW cx_sadl_contract_violation( )
                                                      exp_otr_textid      = cx_sadl_contract_violation=>message
                                                      exp_text_cp         = co_catch_22 ).
    ENDTRY.
  ENDMETHOD.

  METHOD class_setup.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_true ).
  ENDMETHOD.

  METHOD class_teardown.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_false ).
  ENDMETHOD.

ENDCLASS.




CLASS ltc_meaningful_class_type DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    CLASS-METHODS class_setup.
    CLASS-METHODS class_teardown.
    METHODS application_modelling_error FOR TESTING.
    METHODS internal_sadl_error FOR TESTING.
    METHODS database_failure FOR TESTING.

ENDCLASS.

CLASS ltc_meaningful_class_type IMPLEMENTATION.

  METHOD application_modelling_error.
    DATA(checked_assertion) = abap_false.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = NEW lth_appl_modeling_error_excptn( ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
      CATCH BEFORE UNWIND cx_sadl_dump_appl_model_error.
        checked_assertion = abap_true.
        RESUME. "for coverage
    ENDTRY.
    cl_abap_unit_assert=>assert_true( checked_assertion ).
  ENDMETHOD.

  METHOD internal_sadl_error.
    DATA(checked_assertion) = abap_false.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = NEW cx_sadl_assert( NEW tx_sadl_aunit_no_check( ) ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        cl_abap_unit_assert=>assert_false( xsdbool( lx_dump IS INSTANCE OF cx_sadl_dump_appl_model_error ) ).
        checked_assertion = abap_true.
        RESUME. "for coverage
    ENDTRY.
    cl_abap_unit_assert=>assert_true( checked_assertion ).
  ENDMETHOD.

  METHOD database_failure.
    DATA(checked_assertion) = abap_false.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = cx_sadl_sql_execution=>failed_for_select( dynamic_sql_clauses = VALUE #( )
                                                                                                                                                       count_only          = abap_false
                                                                                                                                                       db_connection       = 'DUMMY'
                                                                                                                                                       error               = NEW tx_sadl_aunit_no_check( ) ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
      CATCH BEFORE UNWIND cx_sadl_dump_database_failure.
        checked_assertion = abap_true.
        RESUME. "for coverage
    ENDTRY.
    cl_abap_unit_assert=>assert_true( checked_assertion ).
  ENDMETHOD.

  METHOD class_setup.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_true ).
  ENDMETHOD.

  METHOD class_teardown.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_false ).
  ENDMETHOD.

ENDCLASS.




CLASS ltc_if_cx_dev_object_info DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    CLASS-METHODS class_setup.
    CLASS-METHODS class_teardown.
    METHODS no_causing_object_identified FOR TESTING.
    METHODS appl_err_points_to_appl_object FOR TESTING.
    METHODS ddic_error_points_to_ddic FOR TESTING.
    METHODS appl_error_as_unexpected_state FOR TESTING.
ENDCLASS.


CLASS ltc_if_cx_dev_object_info IMPLEMENTATION.

  METHOD no_causing_object_identified.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = NEW tx_sadl_aunit_no_check( ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        cl_abap_unit_assert=>assert_initial( lx_dump->if_cx_dev_object_info~tadir_key ).
        cl_abap_unit_assert=>assert_initial( lx_dump->origin_development_object_name ).
        cl_abap_unit_assert=>assert_initial( lx_dump->origin_development_object_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD appl_err_points_to_appl_object.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = NEW lth_dev_obj_wrapper_exception( previous = NEW lth_appl_modeling_error_excptn( ) ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->if_cx_dev_object_info~tadir_key
                                            exp = lth_dev_obj_wrapper_exception=>co_aunit_cx_dev_obj ).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->origin_development_object_name
                                            exp = lth_dev_obj_wrapper_exception=>co_aunit_cx_dev_obj-obj_name ).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->origin_development_object_type
                                            exp = lth_dev_obj_wrapper_exception=>co_aunit_cx_dev_obj-obj_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD ddic_error_points_to_ddic.
    CONSTANTS exp_obj_name TYPE sabp_s_tadir_key-obj_name VALUE 'CL_DD_SOBJECT_FACTORY'.
    CONSTANTS exp_obj_type TYPE sabp_s_tadir_key-obj_type VALUE 'CLAS'.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = cx_sadl_cds_activation_pending=>service_unavailable( cds_entity_in_activation     = 'DUMMY'
                                                                                                                                                                  queried_versions             = VALUE #( )
                                                                                                                                                                  cached_annotation_timestamps = VALUE #( ) ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->if_cx_dev_object_info~tadir_key
                                            exp = VALUE sabp_s_tadir_key( obj_name = exp_obj_name
                                                                          obj_type = exp_obj_type ) ).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->origin_development_object_name
                                            exp = exp_obj_name ).
        cl_abap_unit_assert=>assert_equals( act = lx_dump->origin_development_object_type
                                            exp = exp_obj_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD appl_error_as_unexpected_state.
    DATA(act_error) = cl_sadl_fatal_error=>create_from_exception( NEW lth_some_wrapper_exception( previous = NEW cx_sadl_assert( previous = NEW lth_appl_modeling_error_excptn( ) ) ) ).
    TRY.
        cl_sadl_shortdump=>raise_for_error( act_error ).
        cl_abap_unit_assert=>fail( ).
      CATCH BEFORE UNWIND cx_sadl_shortdump INTO DATA(lx_dump).
        " no reference to bad application object because it is first and foremost wrongfully declared as unexpected state
        cl_abap_unit_assert=>assert_initial( lx_dump->if_cx_dev_object_info~tadir_key ).
        cl_abap_unit_assert=>assert_initial( lx_dump->origin_development_object_name ).
        cl_abap_unit_assert=>assert_initial( lx_dump->origin_development_object_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD class_setup.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_true ).
  ENDMETHOD.

  METHOD class_teardown.
    cl_sadl_aunit_friend=>throw_exc_instead_of_sadl_dump( abap_false ).
  ENDMETHOD.

ENDCLASS.